{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation experiment","title":"Documentation experiment"},{"location":"#documentation-experiment","text":"","title":"Documentation experiment"},{"location":"code_documentation/documentation_experiment/","text":"This is the most simple documentation of the most simple function. A function that says hello if you do too. documentation_experiment constants HELLO module-attribute HELLO = 'hello' A constant that says hello greetings say_hello say_hello ( greeting : Greeting ) -> str A function that greets you if you say hello. Parameters: Name Type Description Default greeting Greeting The greeting you want to say required Returns: Type Description str A greeting... or not Source code in documentation_experiment/greetings.py 5 6 7 8 9 10 11 12 13 14 def say_hello ( greeting : Greeting ) -> str : \"\"\" A function that greets you if you say hello. :param greeting: The greeting you want to say :returns: A greeting... or not \"\"\" if greeting . message . lower () == \"hello\" : return \"Hello back\" else : return HELLO dataclasses Greeting dataclass A greeting class. Source code in documentation_experiment/dataclasses.py 3 4 5 6 7 8 9 @dataclass class Greeting : \"\"\" A greeting class. \"\"\" message : str \"\"\"a message to greet someone\"\"\" message class-attribute message : str a message to greet someone","title":"Documentation experiment"},{"location":"code_documentation/documentation_experiment/#documentation_experiment","text":"","title":"documentation_experiment"},{"location":"code_documentation/documentation_experiment/#documentation_experiment.constants","text":"","title":"constants"},{"location":"code_documentation/documentation_experiment/#documentation_experiment.constants.HELLO","text":"HELLO = 'hello' A constant that says hello","title":"HELLO"},{"location":"code_documentation/documentation_experiment/#documentation_experiment.greetings","text":"","title":"greetings"},{"location":"code_documentation/documentation_experiment/#documentation_experiment.greetings.say_hello","text":"say_hello ( greeting : Greeting ) -> str A function that greets you if you say hello. Parameters: Name Type Description Default greeting Greeting The greeting you want to say required Returns: Type Description str A greeting... or not Source code in documentation_experiment/greetings.py 5 6 7 8 9 10 11 12 13 14 def say_hello ( greeting : Greeting ) -> str : \"\"\" A function that greets you if you say hello. :param greeting: The greeting you want to say :returns: A greeting... or not \"\"\" if greeting . message . lower () == \"hello\" : return \"Hello back\" else : return HELLO","title":"say_hello()"},{"location":"code_documentation/documentation_experiment/#documentation_experiment.dataclasses","text":"","title":"dataclasses"},{"location":"code_documentation/documentation_experiment/#documentation_experiment.dataclasses.Greeting","text":"A greeting class. Source code in documentation_experiment/dataclasses.py 3 4 5 6 7 8 9 @dataclass class Greeting : \"\"\" A greeting class. \"\"\" message : str \"\"\"a message to greet someone\"\"\"","title":"Greeting"},{"location":"code_documentation/documentation_experiment/#documentation_experiment.dataclasses.Greeting.message","text":"message : str a message to greet someone","title":"message"}]}